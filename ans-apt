#!/bin/bash

# Shell Script that will auto-call ansible-playbook for me

if [[ -e $(which allunix) ]]; then
    . "$(which allunix)"
else
    echo "Sorry, looks like you're missing the needed allunix file."
    echo "For info, please see https://github.com/jpartain89/MyFunctions.git"
    exit 1
fi

gen_scripts="/Users/$(logname)/git/generalscripts"
no_sudo

vm_sutdown_text () {
cat <<- EOF
################################################################################

           ARE YOU SURE YOU WANT YOUR VIRTUAL MACHINES TO SHUTDOWN??

################################################################################

                           These machines are:

 			       Downloader
 			      NGINX-Server
			       Web Server

###############################################################################
EOF
}

help_text () {
cat <<- EOF
My personal shortcutting ansible stuffs!

ans-apt [-ua | -uL | -uv | -ul and etc. ]

Options:
    -ua, --update-all       : Updates all Managed Machines
                            :   Apt, Homebrew and Pip
                            :   (Local and Remote, macOS and Linux)
    -ul, --update-local     : Updates all Local Machines
                            :   Apt, Homebrew and Pip
                            :   (RPI's, Virtual and macOS)'
    -u, --update-linux     : Updates Linux Machines
                            :   Apt and Pip

    -pa, --pip-all	    : Updates Pip on all Machines
    -pl, --pip-linux	    : Updates Pip on Linux Machines
    -pm, --pip-mac	    : Updates Pip on all macOS Machines

    -rl, --reboot-linux     : Reboots the Linux Machines
    -rv, --reboot-virtual   : Reboots all Virtual Machines

    -m,  --monit            : Reloads monit on all Managed Machines

    -sl, --shutdown-linux   : Shutdown Linux Machines
    -sv, --shutdown-virtual : Shutdown Virtual Machines

There is not currently an option to shutdown all Managed Linux Machines

    -h,  --help             : this help
EOF
}

while [ $# -ge 1 ]; do
    case "$1" in
        -ua | --update-all )
            echo "";
            echo "Updating all Managed Machines";
            ansible-playbook "$gen_scripts/ansible/apt_basic.yml";
            ansible-playbook "$gen_scripts/ansible/brew_basic.yml";
            exit 0
            ;;
        -ul | --update-local )
            echo "";
            echo "Updating only Local Machines";
            ansible-playbook "$gen_scripts/ansible/apt_basic.yml" --limit=local-linux;
            ansible-playbook "$gen_scripts/ansible/brew_basic.yml";
            exit 0
            ;;
        -ul | --update-linux )
            echo "";
            echo "Updating Linux Machines ";
            ansible-playbook "$gen_scripts/ansible/apt_basic.yml" --limit=local-linux;
            exit 0
            ;;
        -pa | --pip-all )
            echo "";
            echo "Updating Pip on all Managed Machines ";
            ansible-playbook  "$gen_scripts/ansible/pip-playbook.yml";
    	    exit 0
            ;;
        -pm | --pip-mac )
            echo "";
            echo "Updating Pip on all macOS machines.";
            ansible-playbook "$gen_scripts/ansible/pip-playbook.yml"--limit=macos;
		    exit 0
        ;;
        -pl | --pip-linux )
            echo "";
            echo "Updating Pip on Linux Machines ";
            ansible-playbook  "$gen_scripts/ansible/pip-playbook.yml" --limit=linux;
            exit 0
            ;;
        -rl | --reboot-linux )
            echo "";
            echo "Rebooting Linux Machines ";
            ansible-playbook  "$gen_scripts/ansible/restart.yml";
            exit 0
            ;;
        -rv | --reboot-virtual )
            echo "";
            echo "Rebooting only Virtual Machines ";
            ansible-playbook  "$gen_scripts/ansible/restart.yml" --limit=virtual;
            exit 0
            ;;
        -m | --monit )
            echo "";
            echo "Reloads monit on Linux Machines ";
            ansible  linux -s -m service -a 'name=monit state=reloaded';
            exit 0
            ;;
        -sl | --shutdown-linux )
            dialog --yesno "Do you want ALL of the Linux Machines to shutdown?" 0 0
            rc=$?
            if [[ "${rc}" == "0" ]]; then
                ansible-playbook "$gen_scripts/ansible/shutdown.yml"
                exit 0
            else
                    exit 1
            fi
            ;;
        -sv | --shutdown-virtual )
            dialog --yesno "Do you want ALL of the VIRTUAL MACHINES to shutdown?" 0 0
            rc=$?
            if [[ "${rc}" == "0" ]]; then
                ansible-playbook "$gen_scripts/ansible/shutdown.yml" --limit=virtual
                exit 0
            else
                exit 1
            fi
            ;;
        -h | --help )
            help_text &&
            exit 0
            ;;
        * )
            help_text &&
            exit 1
            ;;
    esac
done


if [[ $1 == "" ]]; then
    help_text
    exit 1
fi
