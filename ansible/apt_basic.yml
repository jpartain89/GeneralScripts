---
# Ansible Play to update, upgrade, dist-upgrade, and autoremove --purge

- hosts: linux
  become: yes

  vars:
    - GIT_HOME: /home/jpartain89/git

  tasks:
    - name: Linux | Update the Cache First
      apt: update_cache=yes cache_valid_time=86400

    - name: Linux | Install Aptitude and Update Apt Cache | Raspbian Stretch
      apt:
        name: "{{ item }}"
        state: latest
        update_cache: yes
        cache_valid_time: 86400
        default_release: stretch
      with_items:
        - aptitude
        - apt
      when: ansible_lsb.id == "Raspbian"

    - name: Linux | Install Aptitude and Update Apt Cache | Ubuntu
      apt:
        name: "{{ item }}"
        state: latest
        update_cache: yes
        cache_valid_time: 86400
      with_items:
        - aptitude
        - apt
      when: ansible_lsb.id == "Ubuntu"

    - name: Linux | Apt Upgrade, Dist-Upgrade
      apt: upgrade="{{ item }}"
      with_items:
        - yes
        - safe
        - full
        - dist
      register: upgrade_apt
      ignore_errors: True

    - name: Linux | Show upgrade_apt Output
      debug: var=upgrade_apt.stderr_lines
      when: upgrade_apt|failed

    - name: Linux | Run Apt AutoClean in the Shell
      shell: 'apt autoclean -y'
      register: autoclean_apt
      ignore_errors: True

    - name: Linux | Show Apt AutoClean Output
      debug: var=autoclean_apt.stderr_lines
      when: autoclean_apt|failed

    - name: Linux | Autoremove "rc" Labeled Apps in the Shell
      shell: 'apt autoremove --purge -y $(dpkg --list | grep `^rc` | awk `{print $2}`)'
      register: autoremove_rc_apt
      ignore_errors: True

    - name: Linux | Show AutoRemove "rc" Apps
      debug: var=autoremove_rc_apt.stderr_lines
      when: autoremove_rc_apt|failed

    - name: Linux | Run Pip Installer Against Requirements File
      pip:
        requirements: "{{ GIT_HOME }}/linux_dotfiles/requirements.txt"
        executable: "{{ item }}"
      with_items:
        - "pip2"
        - "pip3"
      register: pip_requirements
      ignore_errors: True

    - name: Linux | Show pip_requirements Output
      debug: var=pip_requirements.stderr_lines
      when: pip_requirements|failed

- hosts: macos
  become: no

  vars:
    - GIT_HOME: /Users/jpartain89/git

  tasks:
    - name: macOS | Running "brewdate"
      shell: '/usr/local/bin/brewdate'
      register: _brewdate

    - name: macOS | Show brewdate Output
      debug: var=_brewdate.stderr_lines
      when: _brewdate|failed

    - name: macOS | Run Pip Installer Against Requirements File
      pip:
        requirements: "{{ GIT_HOME }}/macOS-First-Steps/requirements.txt"
        executable: "{{ item }}"
      with_items:
        - pip2
        - pip3
      register: pip_requirements
      ignore_errors: True

    - name: macOS | Show pip_requirements Output
      debug: var=pip_requirements.stderr_lines
      when: pip_requirements|failed
