#!/usr/bin/env bash

# My Starter bash functions script for my default stuff I use on all my scripts
# This script needs to be installed or linked at
## ~/.config/functions/bash_functions

# program info
__PROGRAM_NAME="bash_functions"

__DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

__FUNCTIONS_LOCATION="${HOME}/.config/functions"

if [[ ! -x "${__FUNCTIONS_LOCATION}/${__PROGRAM_NAME}" ]]; then
    if [[ ! -d "${__FUNCTIONS_LOCATION}" ]]; then
        echo "Creating ~/.config/functions"
        mkdir -p "${__FUNCTIONS_LOCATION}"
    fi
    if [[ ! -d "${__FUNCTIONS_LOCATION}/${__PROGRAM_NAME}" ]]; then
        echo "Linking bash_functions to your home directory"
        ln -svf "${__DIR}/${__PROGRAM_NAME}" "${__FUNCTIONS_LOCATION}/${__PROGRAM_NAME}"
    fi
fi

_link_install() {
    # This "auto-installs" git-auto into /usr/local/bin for ya!
    command -v "${PROGRAM_NAME}" 1>/dev/null 2>&1 || {
        (
            if [ -x "${DIR}/${PROGRAM_NAME}" ]; then
                sudo ln -svf "${DIR}/${PROGRAM_NAME}" "/usr/local/bin/${PROGRAM_NAME}"
                sudo chmod -R 0775 "/usr/local/bin/${PROGRAM_NAME}"
            else
                echo "For some reason, linking ${PROGRAM_NAME} to /usr/local/bin,"
                echo "failed. My apologies for not being able to figure it out..."
                exit 1
            fi
        )
    }
}

_on_error_long() {
    status=${?}
    script=${0}
    line=${1}
    shift
    args=
    for i in "${@}"; do
        args+="\"${i}\" "
    done

cat <<- EOF

------------------------------------------------------------
Error occurred on "${script}" [Line "${line}"]: Status ${status}

PID: ${$}
User: "${USER}"
Current directory: "${PWD}"
Command line: "${script} ${args}"
------------------------------------------------------------

EOF
}

_trap_error() {
    _on_error_long "${@}"
    # use:
    #trap _trap_error ERR
}

_die() {
    _on_error_long "${@}"
    echo "${PROGRAM_NAME}: ${1}" >&2
    exit "${2:-1}"
}

_trap_die() {
    _die "${@}"
    # Use
    #trap "_trap_die" SIGHUP SIGINT SIGTERM
}

_trap() {
    trap _trap_error ERR
    trap _trap_die SIGHUP SIGINT SIGTERM
}

_logging() {
    exec 1> >(logger -s -t "${0##*/}") 2>&1
}

_getopt_test() {
    if [[ "$(uname)" == "Darwin" ]]; then
        # This tests for gnu-getopt, as thats needed to run
        if [ -f /usr/local/opt/gnu-getopt/bin/getopt ]; then
            GETOPT="/usr/local/opt/gnu-getopt/bin/getopt"
            if [ "$("${GETOPT}" --test; echo $?)" != 4 ]; then
                _die "You seem to have the wrong version of gnu-getopt?
                Please investigate and have the proper one installed."
            fi
        else
            _die "Seems you're missing the required gnu-getopt program.
            Please install using brew install gnu-getopt."
        fi
    elif [[ "$(uname)" == "Linux" ]]; then
        if [ -f "$(command -v getopt)" ]; then
            GETOPT="$(command -v getopt)"
            if [ "$("${GETOPT}" --test; echo ${?})" != 4 ]; then
                _die "You seem to have the wrong version of getopt!
                Please, take care to investigate and rectify the situation."
            fi
        else
            _die "Seems you're missing the required getopt program.
            Please, install using your package manager."
        fi
    fi
}

parse_yaml() {
   local prefix=${2}
   local s='[[:space:]]*' w='[a-zA-Z0-9_]*' fs=$(echo @|tr @ '\034')
   sed -ne "s|^\(${s}\):|\1|" \
        -e "s|^\(${s}\)\(${w}\)${s}:${s}[\"']\(.*\)[\"']${s}\$|\1${fs}\2${fs}\3|p" \
        -e "s|^\(${s}\)\(${w}\)${s}:${s}\(.*\)${s}\$|\1${fs}\2${fs}\3|p"  ${1} |
   awk -F${fs} '{
      indent = length($1)/2;
      vname[indent] = $2;
      for (i in vname) {if (i > indent) {delete vname[i]}}
      if (length($3) > 0) {
         vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
         printf("%s%s%s=\"%s\"\n", "'${prefix}'",vn, $2, $3);
      }
   }'
}

term_screen_size() {
    # Find the rows and columns. Will default to 80x24 if it can not be detected.
    screen_size=$(stty size 2>/dev/null || echo 24 80)
    rows=$(echo "${screen_size}" | awk '{print $1}')
    columns=$(echo "${screen_size}" | awk '{print $2}')

    # Divide by two so the dialogs take up half of the screen, which looks nice.
    r=$(( rows / 2 ))
    c=$(( columns / 2 ))
    # Unless the screen is tiny
    r=$(( r < 20 ? 20 : r ))
    c=$(( c < 70 ? 70 : c ))

    # You use this in a whiptail command structure, aka:
    whiptail --msgbox --backtitle "INVALID OS DETECTED" --title "Invalid OS" "We have not been able to detect a supported OS.
    Currently this installer supports Raspbian and Debian (Jessie and Stretch), Devuan (Jessie) and Ubuntu from 14.04 (trusty) to 17.04 (zesty).
    If you think you received this message in error, you can post an issue on the GitHub at https://github.com/pivpn/pivpn/issues." ${r} ${c}
    # The r c at the end? Thats the sizing
}

# Colors
_end="\033[0m"
_black="\033[0;30m"
_blackb="\033[1;30m"
_white="\033[0;37m"
_whiteb="\033[1;37m"
_red="\033[0;31m"
_redb="\033[1;31m"
_green="\033[0;32m"
_greenb="\033[1;32m"
_yellow="\033[0;33m"
_yellowb="\033[1;33m"
_blue="\033[0;34m"
_blueb="\033[1;34m"
_purple="\033[0;35m"
_purpleb="\033[1;35m"
_lightblue="\033[0;36m"
_lightblueb="\033[1;36m"

_black() {
  echo -e "${_black}${1}${_end}"
}

_blackb() {
  echo -e "${_blackb}${1}${_end}"
}

_white() {
  echo -e "${_white}${1}${_end}"
}

_whiteb() {
  echo -e "${_whiteb}${1}${_end}"
}

_red() {
  echo -e "${_red}${1}${_end}"
}

_redb() {
  echo -e "${_redb}${1}${_end}"
}

_green() {
  echo -e "${_green}${1}${_end}"
}

_greenb() {
  echo -e "${_greenb}${1}${_end}"
}

_yellow() {
  echo -e "${_yellow}${1}${_end}"
}

_yellowb() {
  echo -e "${_yellowb}${1}${_end}"
}

_blue() {
  echo -e "${_blue}${1}${_end}"
}

_blueb() {
  echo -e "${_blueb}${1}${_end}"
}

_purple() {
  echo -e "${_purple}${1}${_end}"
}

_purpleb() {
  echo -e "${_purpleb}${1}${_end}"
}

_lightblue() {
  echo -e "${_lightblue}${1}${_end}"
}

_lightblueb() {
  echo -e "${_lightblueb}${1}${_end}"
}
