#!/usr/bin/env bash
set -e

# This program is to help insert 1Password-saved secrets into their corresponding
# config files, for docker-compose consumption and usage.

PROGRAM_NAME=ssdc
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
REPO_NAME="generalscripts"

ARGS=$*

# File/Directory based variables
DF=docker-compose.yml
# this gives preference from top to bottom, aka:
# if /etc/ssdc.conf is found first, then it stops looking any further
if [[ -f /etc/ssdc.conf ]]; then
    CONFIG_FILE=/etc/ssdc.conf
elif [[ -f /etc/ssdc/ssdc.conf ]]; then
    CONFIG_FILE=/etc/ssdc/ssdc.conf
elif [[ -f "${HOME}/ssdc.conf" ]]; then
    CONFIG_FILE="${HOME}/ssdc.conf"
elif [[ -f "${HOME}/.config/ssdc.conf" ]]; then
    CONFIG_FILE="${HOME}/.config/ssdc.conf"
elif [[ -f "${HOME}/git/docker_directory/ssdc.conf" ]]; then
    CONFIG_FILE="${HOME}/git/docker_directory/ssdc.conf"
fi

. ${CONFIG_FILE}

# Program based Variables
DOCKER="$(command -v docker)"
DOCKER_CMD="${DOCKER} compose -f"

die() {
    cd "${DIR}"
    echo "${PROGRAM_NAME}: $1" >&2
    exit "${2:-1}"
}

help() {
    echo "ssdc [ start ] | [ full-start | full_start ]
        [ stop ] | [ full-stop | full_stop ]
        [ restart ] | [ full-restart | full_restart ]
        [ op ]"
    cat << EOF
SSDC is a program to auto-start, auto-update from git, and auto-create
your various docker compose projects that also are using 1Password
to hide/generate your various secrets that don't need to be saved in
plaintext in a git repo.

This script expects op to be installed and configured on your device,
along with the corresponding git repos to exist.

There also needs to be an ssdc.conf file on your system in one of the
following locations:

    /etc/ssdc.conf
    /etc/ssdc/ssdc.conf
    ~/ssdc.conf
    ~/.config/ssdc.conf
    ~/git/docker_directory/ssdc.conf

The last one is how I personally have all of my git repos setup: ~/git holds
all of them.

Have a look at ssdc.conf in this repo for a working example of ssdc.conf.

    start:      Starts your docker compose files after running git pull and
                pulling down any updates to the containers
    full-start:
    full_start: Does the same as start, but this time asks for your master
                password to inject your secrets to your .env files

    stop:       Stops docker compose containers
    full-stop:
    full_stop:  Stops the containers and removes all op-injected .env files

    restart:      Runs the stop and start commands
    full-restart:
    full_restart: Runs the full-stop and full-start commands

    op:         Just recreates the op-injected files
EOF
}

trap "die 'trap called'" SIGHUP SIGINT SIGTERM

command -v "$PROGRAM_NAME" 1>/dev/null 2>&1 || {
    (
        if [ -x "${DIR}/${PROGRAM_NAME}" ]; then
            sudo ln -svf "${DIR}/${PROGRAM_NAME}" "/usr/local/bin/${PROGRAM_NAME}"
            sudo chmod -R 0775 "/usr/local/bin/${PROGRAM_NAME}"
        else
            echo "For some reason, linking ${PROGRAM_NAME} to /usr/local/bin,"
            echo "failed. My apologies for not being able to figure it out..."
            exit 1
        fi
    )
}

git_pull() {
    # Pulls the main repo for us
    echo "**** Checking for updates to the docker repo(s) ****"
    # This next command is to get a hash of the config file
    # before running any git updating commands, and will reload
    # the script if it finds the config file changed
    m1=$(md5sum "${CONFIG_FILE}")
    while true; do
        for i in "${GIT_REPOS[@]}"; do
            git -C "${DF_BASE}/${i}" pull --recurse-submodules
            git -C "${DF_BASE}/${i}" submodule update --init --recursive
        done
        m2=$(md5sum "${CONFIG_FILE}")
        if [[ "$m1" != "$m2" ]]; then
            exec $(command -v ssdc) "${ARGS}"
        fi
        break
    done
    unset i m2 m1
}

op_process() {
    # Force sign-in to 1Password-CLI
    until eval $(op signin) ; do
        echo "Looks like you failed the password prompt! Try again in 10 seconds!"
        sleep 10
    done

    # Walks through all the found .tpl files
    while IFS=\n read -r file; do
        for i in "${file}"; do
            [[ "${i}" =~ ^#.* ]] && continue

            if [[ -e "${i}" ]]; then
                op inject --force -i "${i}" -o "${i%.*}"
            fi
        done
    #This find command excludes any example.tpl files from being expanded
    done< <(find "${DF_BASE}/${GIT_REPOS[1]}" "${DF_BASE}/${GIT_REPOS[2]}" \
        -iname "*example*" -prune -o -iname "*.tpl" -exec echo {} \;)
}

start_containers() {
    for i in "${DF_LOCATION[@]}"; do
        # Ignores any line in SSDC that starts with #
        [[ "${i}" =~ ^#.* ]] && continue

        echo "##### Starting Containers in ${i} ######"
        ${DOCKER_CMD} "${DF_BASE}/${i}/${DF}" pull &&
        ${DOCKER_CMD} "${DF_BASE}/${i}/${DF}" up -d --remove-orphans
    done
}

stop_containers() {
    for i in "${DF_LOCATION[@]}"; do
        # Ignores any line in ssdc.conf that starts with #
        [[ "${i}" =~ ^#.* ]] && continue

        echo "##### Stopping Containers in ${i} ######"
        ${DOCKER_CMD} "${DF_BASE}/${i}/${DF}" down || true
    done
}

rm_op() {
    while IFS= read -r file; do
        for i in "${file}"; do
            if [[ -e "${i}" ]]; then
                rm "${i}"
            fi
        done
    done< <(find "${DF_BASE}/${DF_LOCATION}" -iname "*example*" -prune -o /
        -iname "*.env" -exec echo {} \;)
}

if [ $# == 0 ] ; then
    help
    trap
fi

while (( "$#" )); do
    case "$1" in
        start )
            git_pull;
            start_containers;
            shift;;
        full_start | full-start )
            git_pull;
            op_process;
            start_containers;
            shift;;
        stop )
            stop_containers;
            shift;;
        full_stop | full-stop )
            stop_containers;
            rm_op;
            shift;;
        restart )
            git_pull;
            stop_containers;
            start_containers;
            shift;;
        full_restart | full-restart )
            git_pull;
            stop_containers;
            rm_op;
            op_process;
            start_containers;
            shift;;
        op )
            op_process;
            shift;;
        * )
            help;
            trap;
            exit;;
    esac
done

