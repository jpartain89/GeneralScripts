#!/usr/bin/env bash
set -e

#This is to call 'transcode-video' in batch-form

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

PROGRAM_NAME="transcode-wrap"
REPO_NAME="generalscripts"

PIPE="/tmp/${PROGRAM_NAME}.out"
CHANGED_FILES_VERBOSE="${HOME}/transcoded-vids-verbose.log"
CHANGED_FILES="${HOME}/transcoded-vids.log"
if [[ ! -p "${PIPE}" ]]; then
  mkfifo "${PIPE}"
fi

if [[ ! -f "${CHANGED_FILES}" ]]; then
  touch "${CHANGED_FILES}"
fi
if [[ ! -f "${CHANGED_FILES_VERBOSE}" ]]; then
  touch "${CHANGED_FILES_VERBOSE}"
fi

# Start logging to journal
systemd-cat < "${PIPE}" &
sleep_pid=$(
  sleep 9999d > "${PIPE}" &  # keep pipe open
  echo ${!}   # but allow us to close it later...
)

TRANSCODE="$(command -v transcode-video)"

command -v "$PROGRAM_NAME" 1>/dev/null 2>&1 || {
  (
    if [ -x "${DIR}/${PROGRAM_NAME}" ]; then
      sudo ln -svf "${DIR}/${PROGRAM_NAME}" "/usr/local/bin/${PROGRAM_NAME}"
      sudo chmod -R 0775 "/usr/local/bin/${PROGRAM_NAME}"
    else
      echo "For some reason, linking ${PROGRAM_NAME} to /usr/local/bin,"
      echo "failed. My apologies for not being able to figure it out..."
      exit 1
    fi
  )
}

die() {
  rm -rv "${PIPE}" &&
  echo "$PROGRAM_NAME: $1" >&2
}

trap die 1 2 3 6 9

#_logging
#_getopt_test

declare -a REQ_APPS=(
  "${TRANSCODE}"
)

for i in "${REQ_APPS[@]}"; do
  if [[ "${i}" == "" ]]; then
    echo "You don't have the necessary programs."
    echo "You need to install ${i}"
    exit 1
  fi
done

usage() {
  echo -e "${PROGRAM_NAME} [ -l | --location ] /foo/bar [ -e | --extension ] .bar
    -l | --location     : Sets the directory location for the files you are wanting trascoded.
    -e | --extension    : Sets the extension of the files you want transcoded

        NOTE:  Can only parse one at time for both items.
      This one is allowed:
        ${PROGRAM_NAME} -l /media/drive -e .mkv
      This one is not:
        ${PROGRAM_NAME} -l /media/drive -l /some/other/spot -e .mkv,.avi"
}

main() {
  while IFS= read -r file; do
    for i in "${file}"; do

      # This assigns the substituted variable to the letter j
      j="${i%${EXT}}.mp4"

      # Writing the mkv file to the $CHANGED_FILE file, prior to the endcoding
      printf "About to encode ${i} to ${j} \n" >> "${CHANGED_FILE_VERBOSE}"
      printf "${j}" >> "${CHANGED_FILE}

      if [[ ! -e "${j}" ]]; then
        transcode-video --quick --mp4 "${i}" --output "${j}"
      fi

      printf "Finished encoding to \n ${j}" >> "${CHANGED_FILE_VERBOSE}"

      unset j
    done;
  done< <(find "${LOCATION}" -iname "*${EXT}" -exec echo {} \;)
}

#SHORT=leh
#LONG=location,ext,help

#OPTS=$(${GETOPT} --options ${SHORT} --long ${LONG} --name "$0" -- "$@")

if [ "${#}" == 0 ] ; then
  usage; die
fi

#eval set -- "${OPTS}"

while (( "${#}" )); do
  case "${1}" in
    -l | --location )
      LOCATION="${2}";
      shift;
      ;;
    -e | --extension )
      EXT="${2}"
      [[ ${EXT} != .* ]] && EXT=".${EXT}"
      shift;
      ;;
    -h | --help )
      usage
      exit 0
      ;;
    -- )
      shift
      break
      ;;
    * ) # preserve positional arguments
      PARAMS="${PARAMS} ${1}"
      shift
      ;;
  esac
done

main

