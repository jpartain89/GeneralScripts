#!/bin/bash

# Created by argbash-init v2.10.0
# Rearrange the order of options below according to what you would like to see in the help message.
# ARG_OPTIONAL_SINGLE([location],[l],[The Directory location to operate within.],[])
# ARG_OPTIONAL_SINGLE([extension],[e],[The extension you want to change from to mp4. Default is mkv],[mkv])
# ARG_HELP([<The general help message of my script>])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.10.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='leh'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_location=
_arg_extension="mkv"


print_help()
{
	printf '%s\n' "<The general help message of my script>"
	printf 'Usage: %s [-l|--location <arg>] [-e|--extension <arg>] [-h|--help]\n' "$0"
	printf '\t%s\n' "-l, --location: The Directory location to operate within. (no default)"
	printf '\t%s\n' "-e, --extension: The extension you want to change from to mp4. Default is mkv (default: 'mkv')"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-l|--location)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_location="$2"
				shift
				;;
			--location=*)
				_arg_location="${_key##--location=}"
				;;
			-l*)
				_arg_location="${_key##-l}"
				;;
			-e|--extension)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_extension="$2"
				shift
				;;
			--extension=*)
				_arg_extension="${_key##--extension=}"
				;;
			-e*)
				_arg_extension="${_key##-e}"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
				;;
		esac
		shift
	done
}

parse_commandline "$@"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


# vvv  PLACE YOUR CODE HERE  vvv
# For example:
#This is to call 'transcode-video' in batch-form

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
PROGRAM_NAME="transcode-wrap"
REPO_NAME="generalscripts"

# This "auto-installs" git-auto into /usr/local/bin for ya!
command -v "$PROGRAM_NAME" 1>/dev/null 2>&1 || {
  (
    if [ -x "${DIR}/${PROGRAM_NAME}" ]; then
      sudo ln -svf "${DIR}/${PROGRAM_NAME}" "/usr/local/bin/${PROGRAM_NAME}"
      sudo chmod -R 0775 "/usr/local/bin/${PROGRAM_NAME}"
    else
      echo "For some reason, linking $PROGRAM_NAME to /usr/local/bin,"
      echo "failed. My apologies for not being able to figure it out..."
      exit 1
    fi
  )
}

TRANSCODE="$(command -v transcode-video)"

if [[ "${TRANSCODE}" == "" ]]; then
  echo "You don't have the necessary program."
  echo "You need to install ${TRANSCODE}"
  exit 1
fi

main() {
  while IFS= read -r file; do
    for i in "$file"; do
      cd $(dirname "$i") &&
      transcode-video --quick --mp4 "$(basename "$i")" \
        "$(basename "${i%"${_arg_extension}"}mp4")"
      cd "${DIR}";
    done;
  done< <(find "$_arg_location" -iname "*.${_arg_extension}" -exec echo {} \;)
}

main

# ^^^  TERMINATE YOUR CODE BEFORE THE BOTTOM ARGBASH MARKER  ^^^

# ] <-- needed because of Argbash
