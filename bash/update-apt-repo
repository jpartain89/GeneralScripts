#!/usr/bin/env bash

# Define root directory for the repository
DIR=/srv/deb
PROG_NAME="$1"
VERSION="$2"
DISTRO="$3"
LOCATION="${DIR}/${PROG_NAME}/${VERSION}/${DISTRO}"

# test to see if user entered in a distro variable, if not display a use message
if [ -z "${PROG_NAME}" ]
   then
      echo -e "No argument supplied.\n"
      echo -e "usage: `basename $0` program_name version distro\n"
      echo -e "DISTRO is the distribution description (i.e. stretch, jessie, etc).\n"
      echo -e"The way to use this script is to do the changes to the target repo first, i.e. delete or copy in the .deb file to $DIR/program_name/version/distro, and then run this script.\n"
      echo -e "This script can be run as an unprivileged user - root is not needed so long as your user can write to the local repository directory.\n"
      exit 1
fi

# test to see if the directory exists, if not exit
if [ ! -d "${LOCATION}" ]
   then
      echo -e "Directory ${LOCATION} does not exist, please create, move .deb files to it, and rerun the script.\n"
      exit 1
fi

cd "${LOCATION}"

# Generate the Packages file
dpkg-scanpackages . /dev/null > Packages
gzip --keep --force -9 Packages

# Generate the Release file
cat "${DIR}/${PROG_NAME}/distribution.${PROG_NAME}" > Release

# The Date: field has the same format as the Debian package changelog entries,
# that is, RFC 2822 with time zone +0000
echo -e "Date: $(LANG=C date -Ru)" >> Release

# Release must contain MD5 sums of all repository files (in a simple repo just the Packages and Packages.gz files)
echo -e 'MD5Sum:' >> Release
printf ' '$(md5sum Packages.gz | cut --delimiter=' ' --fields=1)' %16d Packages.gz' $(wc --bytes Packages.gz | cut --delimiter=' ' --fields=1) >> Release
printf '\n '$(md5sum Packages | cut --delimiter=' ' --fields=1)' %16d Packages' $(wc --bytes Packages | cut --delimiter=' ' --fields=1) >> Release

# Release must contain SHA256 sums of all repository files (in a simple repo just the Packages and Packages.gz files)
echo -e '\nSHA256:' >> Release
printf ' '$(sha256sum Packages.gz | cut --delimiter=' ' --fields=1)' %16d Packages.gz' $(wc --bytes Packages.gz | cut --delimiter=' ' --fields=1) >> Release
printf '\n '$(sha256sum Packages | cut --delimiter=' ' --fields=1)' %16d Packages' $(wc --bytes Packages | cut --delimiter=' ' --fields=1) >> Release

# Clearsign the Release file (that is, sign it without encrypting it)
gpg --clearsign --digest-algo SHA512 -o InRelease Release

# Release.gpg only need for older apt versions
# gpg -abs --digest-algo SHA512 -o Release.gpg Release
