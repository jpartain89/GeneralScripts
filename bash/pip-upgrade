#!/bin/bash -e
# shellcheck disable=SC2086

# This script attempts to `find` all of the installed pip executables
# that are installed in `/usr/local/bin` and `/usr/bin` using `find`
#
# Then, it runs `freeze` to get a list of all installed pip apps
# And then runs `install --upgrade` on the list

# Copyright Â© 2017-2018 JPCDI, JPartain89 and Justin Partain
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Program Info
PROGRAM_NAME="pip-upgrade"
VERSION="1.0.0"
if [[ $# -ge 1 ]]; then FLAG="$1"; fi
space_PATH="$(echo $PATH | tr : " " )"

# This makes sure that the PATH is set correctly
# The `Cellar` line is there for my macOS machines
export PATH="/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin"
[ -e /usr/local/Cellar ] && export PATH="$PATH:/usr/local/Cellar"

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

command -v "$PROGRAM_NAME" 1>/dev/null 2>&1 || {
    (
        if [ -x "${DIR}/${PROGRAM_NAME}" ]; then
            sudo ln -svf "${DIR}/${PROGRAM_NAME}" "/usr/local/bin/${PROGRAM_NAME}"
            sudo chmod -R 0775 "/usr/local/bin/${PROGRAM_NAME}"
        else
            echo "For some reason, linking $PROGRAM_NAME to /usr/local/bin,"
            echo "failed. My apologies for not being able to figure it out..."
            exit 1
        fi
    )
}

function usage {
    echo "Usage: pip-upgrade [option]"
    echo
    echo -e "\tRunning this command without any flags will run"
    echo -e "\n\t`sudo -H [pip | pip2 | pip3 | etc ] install -U $(installed apps)`"
    echo -e "\tIt goes through and tries to find all of the installed `pip` commands across the system using your $PATH variable."
    echo -e "\n\tIt then runs one of those `pips --list`, and then runs `pip update` against that list."
    echo -e "\n\t-l | --list \tThis will make this script not run the upgrade, but output the installed apps.\n"
}

# This creates the blank array
pipArray=()

# This tries to find all of the installed `pip` commands using the system $PATH
while IFS= read -r line; do
    pipArray+=("$line")
done < <(find "$space_PATH" \( -iname 'pip' -o -iname 'pip[0-9]' -o -iname 'pip[0-9].[0-9]' \) -exec sh -c 'echo "$0"' {} \; )

function exitBlock() {
    unset pipArray apps i
    exit $?
}

trap 'exitBlock' EXIT HUP INT QUIT TERM

for i in "${pipArray[@]}"; do
    echo "Updating the installed apps for:"
    echo "      $i      "
    echo ""
    apps=$("$i" list --format=columns | awk 'NR>2 { print $1 }' | tr '\n' ' ')
    if [[ $FLAG == "-l" ]] || [[ $FLAG == "--list" ]]; then
        echo "################################"
        echo "The following apps are with $i"
        echo "$apps"
    else
        echo "Updating the installed apps for:"
        echo "      $i      "
        echo ""
        sudo -H $i install -U $apps 2>&1
    fi
    unset apps

    if [[ -n "${i}" ]]; then
        echo ""
    fi
done
